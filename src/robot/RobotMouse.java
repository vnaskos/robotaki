package robot;

import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import robot.actions.Action;
import robot.actions.End;
import robot.dialogs.DelayDialog;
import robot.dialogs.GoToDialog;
import robot.dialogs.MouseClickDialog;
import robot.dialogs.MouseMoveXYDialog;
import robot.dialogs.RepeatDialog;
import robot.handlers.RunHandler;
import robot.handlers.OpenHandler;
import robot.handlers.SaveHandler;

/**
 *
 * @author Vasilis Naskos
 */
public class RobotMouse extends javax.swing.JFrame {
    
    private final MouseClickDialog mouseClickDialog;
    private final GoToDialog goToDialog;
    private final MouseMoveXYDialog moveXYDialog;
    private final DelayDialog delayDialog;
    private final RepeatDialog propertiesRepeat;
    
    /** Creates new form Mouse */
    public RobotMouse() {
        initComponents();
        this.setLocationRelativeTo(null);
        
        goToDialog = new GoToDialog(actionsList);
        mouseClickDialog = new MouseClickDialog(actionsList);
        moveXYDialog = new MouseMoveXYDialog(actionsList);
        delayDialog = new DelayDialog(actionsList);
        propertiesRepeat = new RepeatDialog(actionsList);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        mainPanel = new javax.swing.JPanel();
        tabbedPane = new javax.swing.JTabbedPane();
        eventsPanel = new javax.swing.JPanel();
        goToEventButton = new javax.swing.JButton();
        clickEventButton = new javax.swing.JButton();
        moveEventButton = new javax.swing.JButton();
        delayEventButton = new javax.swing.JButton();
        repeatEventButton = new javax.swing.JButton();
        endEventButton = new javax.swing.JButton();
        listControlsPanel = new javax.swing.JPanel();
        upButton = new javax.swing.JButton();
        downButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        actionsList = new robot.ActionsList();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        saveMenuItem = new javax.swing.JMenuItem();
        openMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        stopRepeatMenuItem = new javax.swing.JMenuItem();
        alwaysOnTopMenuItem = new javax.swing.JCheckBoxMenuItem();
        runMenu = new javax.swing.JMenu();
        startMenuItem = new javax.swing.JMenuItem();
        stopMenuItem = new javax.swing.JMenuItem();
        aboutMenu = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Robotaki");

        goToEventButton.setText("Go To");
        goToEventButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goToEventButtonActionPerformed(evt);
            }
        });

        clickEventButton.setText("Mouse Click");
        clickEventButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clickEventButtonActionPerformed(evt);
            }
        });

        moveEventButton.setText("Move at X/Y");
        moveEventButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveEventButtonActionPerformed(evt);
            }
        });

        delayEventButton.setText("Delay");
        delayEventButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delayEventButtonActionPerformed(evt);
            }
        });

        repeatEventButton.setText("Repeat");
        repeatEventButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                repeatEventButtonActionPerformed(evt);
            }
        });

        endEventButton.setText("End");
        endEventButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endEventButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout eventsPanelLayout = new javax.swing.GroupLayout(eventsPanel);
        eventsPanel.setLayout(eventsPanelLayout);
        eventsPanelLayout.setHorizontalGroup(
            eventsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(eventsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(eventsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(goToEventButton, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)
                    .addComponent(clickEventButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                    .addComponent(moveEventButton, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                    .addComponent(delayEventButton, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)
                    .addComponent(repeatEventButton, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)
                    .addComponent(endEventButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        eventsPanelLayout.setVerticalGroup(
            eventsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(eventsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(goToEventButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(moveEventButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clickEventButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(delayEventButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(repeatEventButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(endEventButton)
                .addContainerGap(143, Short.MAX_VALUE))
        );

        tabbedPane.addTab("Events", eventsPanel);

        upButton.setText("Up");
        upButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upButtonActionPerformed(evt);
            }
        });

        downButton.setText("Down");
        downButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downButtonActionPerformed(evt);
            }
        });

        removeButton.setText("Remove");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout listControlsPanelLayout = new javax.swing.GroupLayout(listControlsPanel);
        listControlsPanel.setLayout(listControlsPanelLayout);
        listControlsPanelLayout.setHorizontalGroup(
            listControlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(listControlsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(upButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(downButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(removeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        listControlsPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {downButton, removeButton, upButton});

        listControlsPanelLayout.setVerticalGroup(
            listControlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, listControlsPanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(listControlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(upButton)
                    .addComponent(downButton)
                    .addComponent(removeButton)
                    .addComponent(clearButton))
                .addContainerGap())
        );

        jScrollPane1.setViewportView(actionsList);

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(listControlsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPane)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane1)
                .addGap(0, 0, 0)
                .addComponent(listControlsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        fileMenu.setText("File");

        saveMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveMenuItem.setText("Save");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenuItem);

        openMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openMenuItem.setText("Open");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setText("Edit");

        stopRepeatMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F6, 0));
        stopRepeatMenuItem.setText("Stop Repeat");
        stopRepeatMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopRepeatMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(stopRepeatMenuItem);

        alwaysOnTopMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F9, 0));
        alwaysOnTopMenuItem.setSelected(true);
        alwaysOnTopMenuItem.setText("Always on Top");
        alwaysOnTopMenuItem.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                alwaysOnTopMenuItemStateChanged(evt);
            }
        });
        editMenu.add(alwaysOnTopMenuItem);

        menuBar.add(editMenu);

        runMenu.setText("Run");

        startMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        startMenuItem.setText("Start Running");
        startMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startMenuItemActionPerformed(evt);
            }
        });
        runMenu.add(startMenuItem);

        stopMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F8, 0));
        stopMenuItem.setText("Stop Running");
        stopMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopMenuItemActionPerformed(evt);
            }
        });
        runMenu.add(stopMenuItem);

        menuBar.add(runMenu);

        aboutMenu.setText("About");

        jMenuItem1.setText("About");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        aboutMenu.add(jMenuItem1);

        menuBar.add(aboutMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void goToEventButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goToEventButtonActionPerformed
        goToDialog.setVisible(true);
}//GEN-LAST:event_goToEventButtonActionPerformed

    private void startMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startMenuItemActionPerformed
        start();
    }//GEN-LAST:event_startMenuItemActionPerformed

    private void delayEventButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delayEventButtonActionPerformed
        delayDialog.setVisible(true);
    }//GEN-LAST:event_delayEventButtonActionPerformed

    private void stopMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopMenuItemActionPerformed
        RunHandler.stop();
    }//GEN-LAST:event_stopMenuItemActionPerformed

    private void repeatEventButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_repeatEventButtonActionPerformed
        propertiesRepeat.setVisible(true);
    }//GEN-LAST:event_repeatEventButtonActionPerformed

    private void stopRepeatMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopRepeatMenuItemActionPerformed
        RunHandler.exitLoop();
    }//GEN-LAST:event_stopRepeatMenuItemActionPerformed

    private void clickEventButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clickEventButtonActionPerformed
        mouseClickDialog.setVisible(true);
    }//GEN-LAST:event_clickEventButtonActionPerformed

    private void moveEventButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveEventButtonActionPerformed
        moveXYDialog.setVisible(true);
    }//GEN-LAST:event_moveEventButtonActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        save();
    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        open();
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void alwaysOnTopMenuItemStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_alwaysOnTopMenuItemStateChanged
        if(alwaysOnTopMenuItem.isSelected()){
            this.setAlwaysOnTop(true);
        }else{
            this.setAlwaysOnTop(false);
        }
    }//GEN-LAST:event_alwaysOnTopMenuItemStateChanged

    private void endEventButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endEventButtonActionPerformed
        End end = new End();
        actionsList.addAction(end);
    }//GEN-LAST:event_endEventButtonActionPerformed

    private void upButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upButtonActionPerformed
        actionsList.moveUp();
    }//GEN-LAST:event_upButtonActionPerformed

    private void downButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downButtonActionPerformed
        actionsList.moveDown();
    }//GEN-LAST:event_downButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        actionsList.removeSelected();
    }//GEN-LAST:event_removeButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        actionsList.removeAllActions();
    }//GEN-LAST:event_clearButtonActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        About about = new About();
        about.setVisible(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(RobotMouse.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(RobotMouse.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(RobotMouse.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(RobotMouse.class.getName()).log(Level.SEVERE, null, ex);
        }
        RobotMouse m = new RobotMouse();
        m.setVisible(true);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu aboutMenu;
    private robot.ActionsList actionsList;
    private javax.swing.JCheckBoxMenuItem alwaysOnTopMenuItem;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton clickEventButton;
    private javax.swing.JButton delayEventButton;
    private javax.swing.JButton downButton;
    private javax.swing.JMenu editMenu;
    private javax.swing.JButton endEventButton;
    private javax.swing.JPanel eventsPanel;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JButton goToEventButton;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel listControlsPanel;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JButton moveEventButton;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JButton removeButton;
    private javax.swing.JButton repeatEventButton;
    private javax.swing.JMenu runMenu;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JMenuItem startMenuItem;
    private javax.swing.JMenuItem stopMenuItem;
    private javax.swing.JMenuItem stopRepeatMenuItem;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JButton upButton;
    // End of variables declaration//GEN-END:variables

    private void save() {
        if (fileChooser.showSaveDialog(this) != JFileChooser.APPROVE_OPTION) {
            return;
        }

        String filepath = fileChooser.getSelectedFile().getPath();
        SaveHandler.save(actionsList.getActions(), filepath);
    }    

    private void open() {
        if (fileChooser.showOpenDialog(this) != JFileChooser.APPROVE_OPTION) {
            return;
        }

        String file = fileChooser.getSelectedFile().getPath();

        OpenHandler.open(actionsList, file);
    }    
    
    private void start() {
        ArrayList<Action> actions = actionsList.getActions();
        
        RunHandler handler = RunHandler.getInstance(actions, actionsList);
        if (handler != null) {
            handler.start();
        }
    }
    
}
